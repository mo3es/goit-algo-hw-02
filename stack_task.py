# Створюємо функцію перевірки симетричності дужок, яка приймає на вхід строку для перевірки та повертає строку результат
def check_symmetry(s: str) -> str:
        
    # Створюємо стек для зберігання відкритих дужок
    stack = []

    # Створюємо множини відкриваючих та закриваючих дужок
    opening_brackets = {'(', '[', '{'}
    closing_brackets = {')', ']', '}'}

    # Здійснюємо посимвольний аналіз строки
    for char in s:
        # Якщо символ є відкриваючою дужкою, додаємо її до стеку
        if char in opening_brackets:
            stack.append(char)
        # Якщо символ є закриваючим розділювачем, то перевіряєм чи є в стеку відкриті дужки. Якщо немає - строка несиметрична, якщо є - перевіряємо на відповідність закриваючої дужки тій, що остання у стеку. Якщо не відповідає - несиметрично. Відповідність перевіряється по кодам символів (орд відкриваючої дужки дорівнює орд закриваючої мінус 1, для фігурної та квадратної  -2). Символи, що відсутні у множинах ігноруються.
        elif char in closing_brackets:
            if len(stack) == 0:
                return "Дужки у строці несиметричні"
            last_opener = stack.pop()
            check_brackets = ord(char) == ord(last_opener) + 1 if ord(last_opener) == 40 else ord(last_opener) + 2
            if not check_brackets:
                return "Несиметрично"
    
    if len(stack) == 0:
        return "Симетрично"
    else:
        return "Несиметрично"

if __name__ == "__main__":
    test_string = input('Введіть строку для перевірки\n')
    result = check_symmetry(test_string)
    print(f"'{test_string}': {result}")

